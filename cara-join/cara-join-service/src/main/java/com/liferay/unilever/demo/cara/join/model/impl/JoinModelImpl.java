/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.unilever.demo.cara.join.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.liferay.unilever.demo.cara.join.model.Join;
import com.liferay.unilever.demo.cara.join.model.JoinModel;
import com.liferay.unilever.demo.cara.join.model.JoinSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Join service. Represents a row in the &quot;cara_Join&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link JoinModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JoinImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JoinImpl
 * @see Join
 * @see JoinModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class JoinModelImpl extends BaseModelImpl<Join> implements JoinModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a join model instance should use the {@link Join} interface instead.
	 */
	public static final String TABLE_NAME = "cara_Join";
	public static final Object[][] TABLE_COLUMNS = {
			{ "jobId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "projectId", Types.BIGINT },
			{ "jobType", Types.VARCHAR },
			{ "variant", Types.VARCHAR },
			{ "format", Types.VARCHAR },
			{ "visualDesign", Types.BOOLEAN },
			{ "visualDesignCu", Types.BOOLEAN },
			{ "noticableConsumers", Types.BOOLEAN },
			{ "changePackaging", Types.BOOLEAN },
			{ "changeFormulation", Types.BOOLEAN },
			{ "visualDesignComplete", Types.TIMESTAMP },
			{ "artworkApproved", Types.TIMESTAMP },
			{ "separationFilesToPrinter", Types.TIMESTAMP },
			{ "marketDeployment", Types.TIMESTAMP },
			{ "shipToTrade", Types.TIMESTAMP },
			{ "designAgency", Types.BIGINT },
			{ "pmaUser", Types.BIGINT },
			{ "localMarketing", Types.BIGINT },
			{ "rndLocalDeployUser", Types.BIGINT },
			{ "projectName", Types.VARCHAR },
			{ "projectCategory", Types.VARCHAR },
			{ "projectType", Types.VARCHAR },
			{ "brand", Types.VARCHAR },
			{ "projectUserId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("jobId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("jobType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("variant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("format", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("visualDesign", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("visualDesignCu", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("noticableConsumers", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("changePackaging", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("changeFormulation", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("visualDesignComplete", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("artworkApproved", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("separationFilesToPrinter", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("marketDeployment", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("shipToTrade", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("designAgency", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pmaUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("localMarketing", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rndLocalDeployUser", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("projectName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectUserId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table cara_Join (jobId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,projectId LONG,jobType VARCHAR(75) null,variant VARCHAR(75) null,format VARCHAR(75) null,visualDesign BOOLEAN,visualDesignCu BOOLEAN,noticableConsumers BOOLEAN,changePackaging BOOLEAN,changeFormulation BOOLEAN,visualDesignComplete DATE null,artworkApproved DATE null,separationFilesToPrinter DATE null,marketDeployment DATE null,shipToTrade DATE null,designAgency LONG,pmaUser LONG,localMarketing LONG,rndLocalDeployUser LONG,projectName VARCHAR(75) null,projectCategory VARCHAR(75) null,projectType VARCHAR(75) null,brand VARCHAR(75) null,projectUserId LONG)";
	public static final String TABLE_SQL_DROP = "drop table cara_Join";
	public static final String ORDER_BY_JPQL = " ORDER BY join_.jobId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cara_Join.jobId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.unilever.demo.cara.join.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.unilever.demo.cara.join.model.Join"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.unilever.demo.cara.join.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.unilever.demo.cara.join.model.Join"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.unilever.demo.cara.join.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.unilever.demo.cara.join.model.Join"),
			true);
	public static final long PROJECTID_COLUMN_BITMASK = 1L;
	public static final long JOBID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Join toModel(JoinSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Join model = new JoinImpl();

		model.setJobId(soapModel.getJobId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setProjectId(soapModel.getProjectId());
		model.setJobType(soapModel.getJobType());
		model.setVariant(soapModel.getVariant());
		model.setFormat(soapModel.getFormat());
		model.setVisualDesign(soapModel.getVisualDesign());
		model.setVisualDesignCu(soapModel.getVisualDesignCu());
		model.setNoticableConsumers(soapModel.getNoticableConsumers());
		model.setChangePackaging(soapModel.getChangePackaging());
		model.setChangeFormulation(soapModel.getChangeFormulation());
		model.setVisualDesignComplete(soapModel.getVisualDesignComplete());
		model.setArtworkApproved(soapModel.getArtworkApproved());
		model.setSeparationFilesToPrinter(soapModel.getSeparationFilesToPrinter());
		model.setMarketDeployment(soapModel.getMarketDeployment());
		model.setShipToTrade(soapModel.getShipToTrade());
		model.setDesignAgency(soapModel.getDesignAgency());
		model.setPmaUser(soapModel.getPmaUser());
		model.setLocalMarketing(soapModel.getLocalMarketing());
		model.setRndLocalDeployUser(soapModel.getRndLocalDeployUser());
		model.setProjectName(soapModel.getProjectName());
		model.setProjectCategory(soapModel.getProjectCategory());
		model.setProjectType(soapModel.getProjectType());
		model.setBrand(soapModel.getBrand());
		model.setProjectUserId(soapModel.getProjectUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Join> toModels(JoinSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Join> models = new ArrayList<Join>(soapModels.length);

		for (JoinSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.unilever.demo.cara.join.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.unilever.demo.cara.join.model.Join"));

	public JoinModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _jobId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJobId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _jobId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Join.class;
	}

	@Override
	public String getModelClassName() {
		return Join.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("jobId", getJobId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("projectId", getProjectId());
		attributes.put("jobType", getJobType());
		attributes.put("variant", getVariant());
		attributes.put("format", getFormat());
		attributes.put("visualDesign", getVisualDesign());
		attributes.put("visualDesignCu", getVisualDesignCu());
		attributes.put("noticableConsumers", getNoticableConsumers());
		attributes.put("changePackaging", getChangePackaging());
		attributes.put("changeFormulation", getChangeFormulation());
		attributes.put("visualDesignComplete", getVisualDesignComplete());
		attributes.put("artworkApproved", getArtworkApproved());
		attributes.put("separationFilesToPrinter", getSeparationFilesToPrinter());
		attributes.put("marketDeployment", getMarketDeployment());
		attributes.put("shipToTrade", getShipToTrade());
		attributes.put("designAgency", getDesignAgency());
		attributes.put("pmaUser", getPmaUser());
		attributes.put("localMarketing", getLocalMarketing());
		attributes.put("rndLocalDeployUser", getRndLocalDeployUser());
		attributes.put("projectName", getProjectName());
		attributes.put("projectCategory", getProjectCategory());
		attributes.put("projectType", getProjectType());
		attributes.put("brand", getBrand());
		attributes.put("projectUserId", getProjectUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long jobId = (Long)attributes.get("jobId");

		if (jobId != null) {
			setJobId(jobId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		String jobType = (String)attributes.get("jobType");

		if (jobType != null) {
			setJobType(jobType);
		}

		String variant = (String)attributes.get("variant");

		if (variant != null) {
			setVariant(variant);
		}

		String format = (String)attributes.get("format");

		if (format != null) {
			setFormat(format);
		}

		Boolean visualDesign = (Boolean)attributes.get("visualDesign");

		if (visualDesign != null) {
			setVisualDesign(visualDesign);
		}

		Boolean visualDesignCu = (Boolean)attributes.get("visualDesignCu");

		if (visualDesignCu != null) {
			setVisualDesignCu(visualDesignCu);
		}

		Boolean noticableConsumers = (Boolean)attributes.get(
				"noticableConsumers");

		if (noticableConsumers != null) {
			setNoticableConsumers(noticableConsumers);
		}

		Boolean changePackaging = (Boolean)attributes.get("changePackaging");

		if (changePackaging != null) {
			setChangePackaging(changePackaging);
		}

		Boolean changeFormulation = (Boolean)attributes.get("changeFormulation");

		if (changeFormulation != null) {
			setChangeFormulation(changeFormulation);
		}

		Date visualDesignComplete = (Date)attributes.get("visualDesignComplete");

		if (visualDesignComplete != null) {
			setVisualDesignComplete(visualDesignComplete);
		}

		Date artworkApproved = (Date)attributes.get("artworkApproved");

		if (artworkApproved != null) {
			setArtworkApproved(artworkApproved);
		}

		Date separationFilesToPrinter = (Date)attributes.get(
				"separationFilesToPrinter");

		if (separationFilesToPrinter != null) {
			setSeparationFilesToPrinter(separationFilesToPrinter);
		}

		Date marketDeployment = (Date)attributes.get("marketDeployment");

		if (marketDeployment != null) {
			setMarketDeployment(marketDeployment);
		}

		Date shipToTrade = (Date)attributes.get("shipToTrade");

		if (shipToTrade != null) {
			setShipToTrade(shipToTrade);
		}

		Long designAgency = (Long)attributes.get("designAgency");

		if (designAgency != null) {
			setDesignAgency(designAgency);
		}

		Long pmaUser = (Long)attributes.get("pmaUser");

		if (pmaUser != null) {
			setPmaUser(pmaUser);
		}

		Long localMarketing = (Long)attributes.get("localMarketing");

		if (localMarketing != null) {
			setLocalMarketing(localMarketing);
		}

		Long rndLocalDeployUser = (Long)attributes.get("rndLocalDeployUser");

		if (rndLocalDeployUser != null) {
			setRndLocalDeployUser(rndLocalDeployUser);
		}

		String projectName = (String)attributes.get("projectName");

		if (projectName != null) {
			setProjectName(projectName);
		}

		String projectCategory = (String)attributes.get("projectCategory");

		if (projectCategory != null) {
			setProjectCategory(projectCategory);
		}

		String projectType = (String)attributes.get("projectType");

		if (projectType != null) {
			setProjectType(projectType);
		}

		String brand = (String)attributes.get("brand");

		if (brand != null) {
			setBrand(brand);
		}

		Long projectUserId = (Long)attributes.get("projectUserId");

		if (projectUserId != null) {
			setProjectUserId(projectUserId);
		}
	}

	@JSON
	@Override
	public long getJobId() {
		return _jobId;
	}

	@Override
	public void setJobId(long jobId) {
		_columnBitmask = -1L;

		_jobId = jobId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask |= PROJECTID_COLUMN_BITMASK;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	@Override
	public String getJobType() {
		if (_jobType == null) {
			return StringPool.BLANK;
		}
		else {
			return _jobType;
		}
	}

	@Override
	public void setJobType(String jobType) {
		_jobType = jobType;
	}

	@JSON
	@Override
	public String getVariant() {
		if (_variant == null) {
			return StringPool.BLANK;
		}
		else {
			return _variant;
		}
	}

	@Override
	public void setVariant(String variant) {
		_variant = variant;
	}

	@JSON
	@Override
	public String getFormat() {
		if (_format == null) {
			return StringPool.BLANK;
		}
		else {
			return _format;
		}
	}

	@Override
	public void setFormat(String format) {
		_format = format;
	}

	@JSON
	@Override
	public Boolean getVisualDesign() {
		return _visualDesign;
	}

	@Override
	public void setVisualDesign(Boolean visualDesign) {
		_visualDesign = visualDesign;
	}

	@JSON
	@Override
	public Boolean getVisualDesignCu() {
		return _visualDesignCu;
	}

	@Override
	public void setVisualDesignCu(Boolean visualDesignCu) {
		_visualDesignCu = visualDesignCu;
	}

	@JSON
	@Override
	public Boolean getNoticableConsumers() {
		return _noticableConsumers;
	}

	@Override
	public void setNoticableConsumers(Boolean noticableConsumers) {
		_noticableConsumers = noticableConsumers;
	}

	@JSON
	@Override
	public Boolean getChangePackaging() {
		return _changePackaging;
	}

	@Override
	public void setChangePackaging(Boolean changePackaging) {
		_changePackaging = changePackaging;
	}

	@JSON
	@Override
	public Boolean getChangeFormulation() {
		return _changeFormulation;
	}

	@Override
	public void setChangeFormulation(Boolean changeFormulation) {
		_changeFormulation = changeFormulation;
	}

	@JSON
	@Override
	public Date getVisualDesignComplete() {
		return _visualDesignComplete;
	}

	@Override
	public void setVisualDesignComplete(Date visualDesignComplete) {
		_visualDesignComplete = visualDesignComplete;
	}

	@JSON
	@Override
	public Date getArtworkApproved() {
		return _artworkApproved;
	}

	@Override
	public void setArtworkApproved(Date artworkApproved) {
		_artworkApproved = artworkApproved;
	}

	@JSON
	@Override
	public Date getSeparationFilesToPrinter() {
		return _separationFilesToPrinter;
	}

	@Override
	public void setSeparationFilesToPrinter(Date separationFilesToPrinter) {
		_separationFilesToPrinter = separationFilesToPrinter;
	}

	@JSON
	@Override
	public Date getMarketDeployment() {
		return _marketDeployment;
	}

	@Override
	public void setMarketDeployment(Date marketDeployment) {
		_marketDeployment = marketDeployment;
	}

	@JSON
	@Override
	public Date getShipToTrade() {
		return _shipToTrade;
	}

	@Override
	public void setShipToTrade(Date shipToTrade) {
		_shipToTrade = shipToTrade;
	}

	@JSON
	@Override
	public long getDesignAgency() {
		return _designAgency;
	}

	@Override
	public void setDesignAgency(long designAgency) {
		_designAgency = designAgency;
	}

	@JSON
	@Override
	public long getPmaUser() {
		return _pmaUser;
	}

	@Override
	public void setPmaUser(long pmaUser) {
		_pmaUser = pmaUser;
	}

	@JSON
	@Override
	public long getLocalMarketing() {
		return _localMarketing;
	}

	@Override
	public void setLocalMarketing(long localMarketing) {
		_localMarketing = localMarketing;
	}

	@JSON
	@Override
	public long getRndLocalDeployUser() {
		return _rndLocalDeployUser;
	}

	@Override
	public void setRndLocalDeployUser(long rndLocalDeployUser) {
		_rndLocalDeployUser = rndLocalDeployUser;
	}

	@JSON
	@Override
	public String getProjectName() {
		if (_projectName == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectName;
		}
	}

	@Override
	public void setProjectName(String projectName) {
		_projectName = projectName;
	}

	@JSON
	@Override
	public String getProjectCategory() {
		if (_projectCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectCategory;
		}
	}

	@Override
	public void setProjectCategory(String projectCategory) {
		_projectCategory = projectCategory;
	}

	@JSON
	@Override
	public String getProjectType() {
		if (_projectType == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectType;
		}
	}

	@Override
	public void setProjectType(String projectType) {
		_projectType = projectType;
	}

	@JSON
	@Override
	public String getBrand() {
		if (_brand == null) {
			return StringPool.BLANK;
		}
		else {
			return _brand;
		}
	}

	@Override
	public void setBrand(String brand) {
		_brand = brand;
	}

	@JSON
	@Override
	public long getProjectUserId() {
		return _projectUserId;
	}

	@Override
	public void setProjectUserId(long projectUserId) {
		_projectUserId = projectUserId;
	}

	@Override
	public String getProjectUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getProjectUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setProjectUserUuid(String projectUserUuid) {
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Join.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Join toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Join)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JoinImpl joinImpl = new JoinImpl();

		joinImpl.setJobId(getJobId());
		joinImpl.setGroupId(getGroupId());
		joinImpl.setCompanyId(getCompanyId());
		joinImpl.setUserId(getUserId());
		joinImpl.setUserName(getUserName());
		joinImpl.setCreateDate(getCreateDate());
		joinImpl.setModifiedDate(getModifiedDate());
		joinImpl.setProjectId(getProjectId());
		joinImpl.setJobType(getJobType());
		joinImpl.setVariant(getVariant());
		joinImpl.setFormat(getFormat());
		joinImpl.setVisualDesign(getVisualDesign());
		joinImpl.setVisualDesignCu(getVisualDesignCu());
		joinImpl.setNoticableConsumers(getNoticableConsumers());
		joinImpl.setChangePackaging(getChangePackaging());
		joinImpl.setChangeFormulation(getChangeFormulation());
		joinImpl.setVisualDesignComplete(getVisualDesignComplete());
		joinImpl.setArtworkApproved(getArtworkApproved());
		joinImpl.setSeparationFilesToPrinter(getSeparationFilesToPrinter());
		joinImpl.setMarketDeployment(getMarketDeployment());
		joinImpl.setShipToTrade(getShipToTrade());
		joinImpl.setDesignAgency(getDesignAgency());
		joinImpl.setPmaUser(getPmaUser());
		joinImpl.setLocalMarketing(getLocalMarketing());
		joinImpl.setRndLocalDeployUser(getRndLocalDeployUser());
		joinImpl.setProjectName(getProjectName());
		joinImpl.setProjectCategory(getProjectCategory());
		joinImpl.setProjectType(getProjectType());
		joinImpl.setBrand(getBrand());
		joinImpl.setProjectUserId(getProjectUserId());

		joinImpl.resetOriginalValues();

		return joinImpl;
	}

	@Override
	public int compareTo(Join join) {
		int value = 0;

		if (getJobId() < join.getJobId()) {
			value = -1;
		}
		else if (getJobId() > join.getJobId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Join)) {
			return false;
		}

		Join join = (Join)obj;

		long primaryKey = join.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		JoinModelImpl joinModelImpl = this;

		joinModelImpl._setModifiedDate = false;

		joinModelImpl._originalProjectId = joinModelImpl._projectId;

		joinModelImpl._setOriginalProjectId = false;

		joinModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Join> toCacheModel() {
		JoinCacheModel joinCacheModel = new JoinCacheModel();

		joinCacheModel.jobId = getJobId();

		joinCacheModel.groupId = getGroupId();

		joinCacheModel.companyId = getCompanyId();

		joinCacheModel.userId = getUserId();

		joinCacheModel.userName = getUserName();

		String userName = joinCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			joinCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			joinCacheModel.createDate = createDate.getTime();
		}
		else {
			joinCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			joinCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			joinCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		joinCacheModel.projectId = getProjectId();

		joinCacheModel.jobType = getJobType();

		String jobType = joinCacheModel.jobType;

		if ((jobType != null) && (jobType.length() == 0)) {
			joinCacheModel.jobType = null;
		}

		joinCacheModel.variant = getVariant();

		String variant = joinCacheModel.variant;

		if ((variant != null) && (variant.length() == 0)) {
			joinCacheModel.variant = null;
		}

		joinCacheModel.format = getFormat();

		String format = joinCacheModel.format;

		if ((format != null) && (format.length() == 0)) {
			joinCacheModel.format = null;
		}

		joinCacheModel.visualDesign = getVisualDesign();

		joinCacheModel.visualDesignCu = getVisualDesignCu();

		joinCacheModel.noticableConsumers = getNoticableConsumers();

		joinCacheModel.changePackaging = getChangePackaging();

		joinCacheModel.changeFormulation = getChangeFormulation();

		Date visualDesignComplete = getVisualDesignComplete();

		if (visualDesignComplete != null) {
			joinCacheModel.visualDesignComplete = visualDesignComplete.getTime();
		}
		else {
			joinCacheModel.visualDesignComplete = Long.MIN_VALUE;
		}

		Date artworkApproved = getArtworkApproved();

		if (artworkApproved != null) {
			joinCacheModel.artworkApproved = artworkApproved.getTime();
		}
		else {
			joinCacheModel.artworkApproved = Long.MIN_VALUE;
		}

		Date separationFilesToPrinter = getSeparationFilesToPrinter();

		if (separationFilesToPrinter != null) {
			joinCacheModel.separationFilesToPrinter = separationFilesToPrinter.getTime();
		}
		else {
			joinCacheModel.separationFilesToPrinter = Long.MIN_VALUE;
		}

		Date marketDeployment = getMarketDeployment();

		if (marketDeployment != null) {
			joinCacheModel.marketDeployment = marketDeployment.getTime();
		}
		else {
			joinCacheModel.marketDeployment = Long.MIN_VALUE;
		}

		Date shipToTrade = getShipToTrade();

		if (shipToTrade != null) {
			joinCacheModel.shipToTrade = shipToTrade.getTime();
		}
		else {
			joinCacheModel.shipToTrade = Long.MIN_VALUE;
		}

		joinCacheModel.designAgency = getDesignAgency();

		joinCacheModel.pmaUser = getPmaUser();

		joinCacheModel.localMarketing = getLocalMarketing();

		joinCacheModel.rndLocalDeployUser = getRndLocalDeployUser();

		joinCacheModel.projectName = getProjectName();

		String projectName = joinCacheModel.projectName;

		if ((projectName != null) && (projectName.length() == 0)) {
			joinCacheModel.projectName = null;
		}

		joinCacheModel.projectCategory = getProjectCategory();

		String projectCategory = joinCacheModel.projectCategory;

		if ((projectCategory != null) && (projectCategory.length() == 0)) {
			joinCacheModel.projectCategory = null;
		}

		joinCacheModel.projectType = getProjectType();

		String projectType = joinCacheModel.projectType;

		if ((projectType != null) && (projectType.length() == 0)) {
			joinCacheModel.projectType = null;
		}

		joinCacheModel.brand = getBrand();

		String brand = joinCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			joinCacheModel.brand = null;
		}

		joinCacheModel.projectUserId = getProjectUserId();

		return joinCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(61);

		sb.append("{jobId=");
		sb.append(getJobId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", jobType=");
		sb.append(getJobType());
		sb.append(", variant=");
		sb.append(getVariant());
		sb.append(", format=");
		sb.append(getFormat());
		sb.append(", visualDesign=");
		sb.append(getVisualDesign());
		sb.append(", visualDesignCu=");
		sb.append(getVisualDesignCu());
		sb.append(", noticableConsumers=");
		sb.append(getNoticableConsumers());
		sb.append(", changePackaging=");
		sb.append(getChangePackaging());
		sb.append(", changeFormulation=");
		sb.append(getChangeFormulation());
		sb.append(", visualDesignComplete=");
		sb.append(getVisualDesignComplete());
		sb.append(", artworkApproved=");
		sb.append(getArtworkApproved());
		sb.append(", separationFilesToPrinter=");
		sb.append(getSeparationFilesToPrinter());
		sb.append(", marketDeployment=");
		sb.append(getMarketDeployment());
		sb.append(", shipToTrade=");
		sb.append(getShipToTrade());
		sb.append(", designAgency=");
		sb.append(getDesignAgency());
		sb.append(", pmaUser=");
		sb.append(getPmaUser());
		sb.append(", localMarketing=");
		sb.append(getLocalMarketing());
		sb.append(", rndLocalDeployUser=");
		sb.append(getRndLocalDeployUser());
		sb.append(", projectName=");
		sb.append(getProjectName());
		sb.append(", projectCategory=");
		sb.append(getProjectCategory());
		sb.append(", projectType=");
		sb.append(getProjectType());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", projectUserId=");
		sb.append(getProjectUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(94);

		sb.append("<model><model-name>");
		sb.append("com.liferay.unilever.demo.cara.join.model.Join");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>jobId</column-name><column-value><![CDATA[");
		sb.append(getJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobType</column-name><column-value><![CDATA[");
		sb.append(getJobType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>variant</column-name><column-value><![CDATA[");
		sb.append(getVariant());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>format</column-name><column-value><![CDATA[");
		sb.append(getFormat());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visualDesign</column-name><column-value><![CDATA[");
		sb.append(getVisualDesign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visualDesignCu</column-name><column-value><![CDATA[");
		sb.append(getVisualDesignCu());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noticableConsumers</column-name><column-value><![CDATA[");
		sb.append(getNoticableConsumers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>changePackaging</column-name><column-value><![CDATA[");
		sb.append(getChangePackaging());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>changeFormulation</column-name><column-value><![CDATA[");
		sb.append(getChangeFormulation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visualDesignComplete</column-name><column-value><![CDATA[");
		sb.append(getVisualDesignComplete());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>artworkApproved</column-name><column-value><![CDATA[");
		sb.append(getArtworkApproved());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>separationFilesToPrinter</column-name><column-value><![CDATA[");
		sb.append(getSeparationFilesToPrinter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketDeployment</column-name><column-value><![CDATA[");
		sb.append(getMarketDeployment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipToTrade</column-name><column-value><![CDATA[");
		sb.append(getShipToTrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>designAgency</column-name><column-value><![CDATA[");
		sb.append(getDesignAgency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pmaUser</column-name><column-value><![CDATA[");
		sb.append(getPmaUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>localMarketing</column-name><column-value><![CDATA[");
		sb.append(getLocalMarketing());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rndLocalDeployUser</column-name><column-value><![CDATA[");
		sb.append(getRndLocalDeployUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectName</column-name><column-value><![CDATA[");
		sb.append(getProjectName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectCategory</column-name><column-value><![CDATA[");
		sb.append(getProjectCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectType</column-name><column-value><![CDATA[");
		sb.append(getProjectType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectUserId</column-name><column-value><![CDATA[");
		sb.append(getProjectUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Join.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Join.class
		};
	private long _jobId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private String _jobType;
	private String _variant;
	private String _format;
	private Boolean _visualDesign;
	private Boolean _visualDesignCu;
	private Boolean _noticableConsumers;
	private Boolean _changePackaging;
	private Boolean _changeFormulation;
	private Date _visualDesignComplete;
	private Date _artworkApproved;
	private Date _separationFilesToPrinter;
	private Date _marketDeployment;
	private Date _shipToTrade;
	private long _designAgency;
	private long _pmaUser;
	private long _localMarketing;
	private long _rndLocalDeployUser;
	private String _projectName;
	private String _projectCategory;
	private String _projectType;
	private String _brand;
	private long _projectUserId;
	private long _columnBitmask;
	private Join _escapedModel;
}