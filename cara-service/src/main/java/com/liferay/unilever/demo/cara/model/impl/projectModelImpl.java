/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.unilever.demo.cara.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import com.liferay.unilever.demo.cara.model.project;
import com.liferay.unilever.demo.cara.model.projectModel;
import com.liferay.unilever.demo.cara.model.projectSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the project service. Represents a row in the &quot;Cara_project&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link projectModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link projectImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see projectImpl
 * @see project
 * @see projectModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class projectModelImpl extends BaseModelImpl<project>
	implements projectModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project model instance should use the {@link project} interface instead.
	 */
	public static final String TABLE_NAME = "Cara_project";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "projectId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "projectRefId", Types.VARCHAR },
			{ "projectName", Types.VARCHAR },
			{ "projectType", Types.VARCHAR },
			{ "brand", Types.VARCHAR },
			{ "brandPosition", Types.VARCHAR },
			{ "projectCategory", Types.VARCHAR },
			{ "charterGateApproval", Types.TIMESTAMP },
			{ "productDesignLock", Types.TIMESTAMP },
			{ "contractGateApproval", Types.TIMESTAMP },
			{ "marketReadyApproval", Types.TIMESTAMP },
			{ "marketDeployment", Types.TIMESTAMP },
			{ "shipToTrade", Types.TIMESTAMP },
			{ "marketingUserId", Types.BIGINT },
			{ "rndUserId", Types.BIGINT },
			{ "rndProductUserId", Types.BIGINT },
			{ "supplyChainUserId", Types.BIGINT },
			{ "customerDevelopmentUserId", Types.BIGINT },
			{ "techLeaderUserId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("projectRefId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("brandPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectCategory", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("charterGateApproval", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("productDesignLock", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("contractGateApproval", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("marketReadyApproval", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("marketDeployment", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("shipToTrade", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("marketingUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rndUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rndProductUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("supplyChainUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("customerDevelopmentUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("techLeaderUserId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table Cara_project (uuid_ VARCHAR(75) null,projectId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,projectRefId VARCHAR(75) null,projectName VARCHAR(75) null,projectType VARCHAR(75) null,brand VARCHAR(75) null,brandPosition VARCHAR(75) null,projectCategory VARCHAR(75) null,charterGateApproval DATE null,productDesignLock DATE null,contractGateApproval DATE null,marketReadyApproval DATE null,marketDeployment DATE null,shipToTrade DATE null,marketingUserId LONG,rndUserId LONG,rndProductUserId LONG,supplyChainUserId LONG,customerDevelopmentUserId LONG,techLeaderUserId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Cara_project";
	public static final String ORDER_BY_JPQL = " ORDER BY project.projectRefId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Cara_project.projectRefId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.unilever.demo.cara.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.unilever.demo.cara.model.project"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.unilever.demo.cara.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.unilever.demo.cara.model.project"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.unilever.demo.cara.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.unilever.demo.cara.model.project"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long PROJECTCATEGORY_COLUMN_BITMASK = 4L;
	public static final long PROJECTNAME_COLUMN_BITMASK = 8L;
	public static final long PROJECTREFID_COLUMN_BITMASK = 16L;
	public static final long PROJECTTYPE_COLUMN_BITMASK = 32L;
	public static final long STATUS_COLUMN_BITMASK = 64L;
	public static final long UUID_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static project toModel(projectSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		project model = new projectImpl();

		model.setUuid(soapModel.getUuid());
		model.setProjectId(soapModel.getProjectId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setProjectRefId(soapModel.getProjectRefId());
		model.setProjectName(soapModel.getProjectName());
		model.setProjectType(soapModel.getProjectType());
		model.setBrand(soapModel.getBrand());
		model.setBrandPosition(soapModel.getBrandPosition());
		model.setProjectCategory(soapModel.getProjectCategory());
		model.setCharterGateApproval(soapModel.getCharterGateApproval());
		model.setProductDesignLock(soapModel.getProductDesignLock());
		model.setContractGateApproval(soapModel.getContractGateApproval());
		model.setMarketReadyApproval(soapModel.getMarketReadyApproval());
		model.setMarketDeployment(soapModel.getMarketDeployment());
		model.setShipToTrade(soapModel.getShipToTrade());
		model.setMarketingUserId(soapModel.getMarketingUserId());
		model.setRndUserId(soapModel.getRndUserId());
		model.setRndProductUserId(soapModel.getRndProductUserId());
		model.setSupplyChainUserId(soapModel.getSupplyChainUserId());
		model.setCustomerDevelopmentUserId(soapModel.getCustomerDevelopmentUserId());
		model.setTechLeaderUserId(soapModel.getTechLeaderUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<project> toModels(projectSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<project> models = new ArrayList<project>(soapModels.length);

		for (projectSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.unilever.demo.cara.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.unilever.demo.cara.model.project"));

	public projectModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return project.class;
	}

	@Override
	public String getModelClassName() {
		return project.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("projectId", getProjectId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("projectRefId", getProjectRefId());
		attributes.put("projectName", getProjectName());
		attributes.put("projectType", getProjectType());
		attributes.put("brand", getBrand());
		attributes.put("brandPosition", getBrandPosition());
		attributes.put("projectCategory", getProjectCategory());
		attributes.put("charterGateApproval", getCharterGateApproval());
		attributes.put("productDesignLock", getProductDesignLock());
		attributes.put("contractGateApproval", getContractGateApproval());
		attributes.put("marketReadyApproval", getMarketReadyApproval());
		attributes.put("marketDeployment", getMarketDeployment());
		attributes.put("shipToTrade", getShipToTrade());
		attributes.put("marketingUserId", getMarketingUserId());
		attributes.put("rndUserId", getRndUserId());
		attributes.put("rndProductUserId", getRndProductUserId());
		attributes.put("supplyChainUserId", getSupplyChainUserId());
		attributes.put("customerDevelopmentUserId",
			getCustomerDevelopmentUserId());
		attributes.put("techLeaderUserId", getTechLeaderUserId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String projectRefId = (String)attributes.get("projectRefId");

		if (projectRefId != null) {
			setProjectRefId(projectRefId);
		}

		String projectName = (String)attributes.get("projectName");

		if (projectName != null) {
			setProjectName(projectName);
		}

		String projectType = (String)attributes.get("projectType");

		if (projectType != null) {
			setProjectType(projectType);
		}

		String brand = (String)attributes.get("brand");

		if (brand != null) {
			setBrand(brand);
		}

		String brandPosition = (String)attributes.get("brandPosition");

		if (brandPosition != null) {
			setBrandPosition(brandPosition);
		}

		String projectCategory = (String)attributes.get("projectCategory");

		if (projectCategory != null) {
			setProjectCategory(projectCategory);
		}

		Date charterGateApproval = (Date)attributes.get("charterGateApproval");

		if (charterGateApproval != null) {
			setCharterGateApproval(charterGateApproval);
		}

		Date productDesignLock = (Date)attributes.get("productDesignLock");

		if (productDesignLock != null) {
			setProductDesignLock(productDesignLock);
		}

		Date contractGateApproval = (Date)attributes.get("contractGateApproval");

		if (contractGateApproval != null) {
			setContractGateApproval(contractGateApproval);
		}

		Date marketReadyApproval = (Date)attributes.get("marketReadyApproval");

		if (marketReadyApproval != null) {
			setMarketReadyApproval(marketReadyApproval);
		}

		Date marketDeployment = (Date)attributes.get("marketDeployment");

		if (marketDeployment != null) {
			setMarketDeployment(marketDeployment);
		}

		Date shipToTrade = (Date)attributes.get("shipToTrade");

		if (shipToTrade != null) {
			setShipToTrade(shipToTrade);
		}

		Long marketingUserId = (Long)attributes.get("marketingUserId");

		if (marketingUserId != null) {
			setMarketingUserId(marketingUserId);
		}

		Long rndUserId = (Long)attributes.get("rndUserId");

		if (rndUserId != null) {
			setRndUserId(rndUserId);
		}

		Long rndProductUserId = (Long)attributes.get("rndProductUserId");

		if (rndProductUserId != null) {
			setRndProductUserId(rndProductUserId);
		}

		Long supplyChainUserId = (Long)attributes.get("supplyChainUserId");

		if (supplyChainUserId != null) {
			setSupplyChainUserId(supplyChainUserId);
		}

		Long customerDevelopmentUserId = (Long)attributes.get(
				"customerDevelopmentUserId");

		if (customerDevelopmentUserId != null) {
			setCustomerDevelopmentUserId(customerDevelopmentUserId);
		}

		Long techLeaderUserId = (Long)attributes.get("techLeaderUserId");

		if (techLeaderUserId != null) {
			setTechLeaderUserId(techLeaderUserId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_projectId = projectId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getProjectRefId() {
		if (_projectRefId == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectRefId;
		}
	}

	@Override
	public void setProjectRefId(String projectRefId) {
		_columnBitmask = -1L;

		if (_originalProjectRefId == null) {
			_originalProjectRefId = _projectRefId;
		}

		_projectRefId = projectRefId;
	}

	public String getOriginalProjectRefId() {
		return GetterUtil.getString(_originalProjectRefId);
	}

	@JSON
	@Override
	public String getProjectName() {
		if (_projectName == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectName;
		}
	}

	@Override
	public void setProjectName(String projectName) {
		_columnBitmask |= PROJECTNAME_COLUMN_BITMASK;

		if (_originalProjectName == null) {
			_originalProjectName = _projectName;
		}

		_projectName = projectName;
	}

	public String getOriginalProjectName() {
		return GetterUtil.getString(_originalProjectName);
	}

	@JSON
	@Override
	public String getProjectType() {
		if (_projectType == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectType;
		}
	}

	@Override
	public void setProjectType(String projectType) {
		_columnBitmask |= PROJECTTYPE_COLUMN_BITMASK;

		if (_originalProjectType == null) {
			_originalProjectType = _projectType;
		}

		_projectType = projectType;
	}

	public String getOriginalProjectType() {
		return GetterUtil.getString(_originalProjectType);
	}

	@JSON
	@Override
	public String getBrand() {
		if (_brand == null) {
			return StringPool.BLANK;
		}
		else {
			return _brand;
		}
	}

	@Override
	public void setBrand(String brand) {
		_brand = brand;
	}

	@JSON
	@Override
	public String getBrandPosition() {
		if (_brandPosition == null) {
			return StringPool.BLANK;
		}
		else {
			return _brandPosition;
		}
	}

	@Override
	public void setBrandPosition(String brandPosition) {
		_brandPosition = brandPosition;
	}

	@JSON
	@Override
	public String getProjectCategory() {
		if (_projectCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _projectCategory;
		}
	}

	@Override
	public void setProjectCategory(String projectCategory) {
		_columnBitmask |= PROJECTCATEGORY_COLUMN_BITMASK;

		if (_originalProjectCategory == null) {
			_originalProjectCategory = _projectCategory;
		}

		_projectCategory = projectCategory;
	}

	public String getOriginalProjectCategory() {
		return GetterUtil.getString(_originalProjectCategory);
	}

	@JSON
	@Override
	public Date getCharterGateApproval() {
		return _charterGateApproval;
	}

	@Override
	public void setCharterGateApproval(Date charterGateApproval) {
		_charterGateApproval = charterGateApproval;
	}

	@JSON
	@Override
	public Date getProductDesignLock() {
		return _productDesignLock;
	}

	@Override
	public void setProductDesignLock(Date productDesignLock) {
		_productDesignLock = productDesignLock;
	}

	@JSON
	@Override
	public Date getContractGateApproval() {
		return _contractGateApproval;
	}

	@Override
	public void setContractGateApproval(Date contractGateApproval) {
		_contractGateApproval = contractGateApproval;
	}

	@JSON
	@Override
	public Date getMarketReadyApproval() {
		return _marketReadyApproval;
	}

	@Override
	public void setMarketReadyApproval(Date marketReadyApproval) {
		_marketReadyApproval = marketReadyApproval;
	}

	@JSON
	@Override
	public Date getMarketDeployment() {
		return _marketDeployment;
	}

	@Override
	public void setMarketDeployment(Date marketDeployment) {
		_marketDeployment = marketDeployment;
	}

	@JSON
	@Override
	public Date getShipToTrade() {
		return _shipToTrade;
	}

	@Override
	public void setShipToTrade(Date shipToTrade) {
		_shipToTrade = shipToTrade;
	}

	@JSON
	@Override
	public long getMarketingUserId() {
		return _marketingUserId;
	}

	@Override
	public void setMarketingUserId(long marketingUserId) {
		_marketingUserId = marketingUserId;
	}

	@Override
	public String getMarketingUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getMarketingUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setMarketingUserUuid(String marketingUserUuid) {
	}

	@JSON
	@Override
	public long getRndUserId() {
		return _rndUserId;
	}

	@Override
	public void setRndUserId(long rndUserId) {
		_rndUserId = rndUserId;
	}

	@Override
	public String getRndUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getRndUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setRndUserUuid(String rndUserUuid) {
	}

	@JSON
	@Override
	public long getRndProductUserId() {
		return _rndProductUserId;
	}

	@Override
	public void setRndProductUserId(long rndProductUserId) {
		_rndProductUserId = rndProductUserId;
	}

	@Override
	public String getRndProductUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getRndProductUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setRndProductUserUuid(String rndProductUserUuid) {
	}

	@JSON
	@Override
	public long getSupplyChainUserId() {
		return _supplyChainUserId;
	}

	@Override
	public void setSupplyChainUserId(long supplyChainUserId) {
		_supplyChainUserId = supplyChainUserId;
	}

	@Override
	public String getSupplyChainUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getSupplyChainUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setSupplyChainUserUuid(String supplyChainUserUuid) {
	}

	@JSON
	@Override
	public long getCustomerDevelopmentUserId() {
		return _customerDevelopmentUserId;
	}

	@Override
	public void setCustomerDevelopmentUserId(long customerDevelopmentUserId) {
		_customerDevelopmentUserId = customerDevelopmentUserId;
	}

	@Override
	public String getCustomerDevelopmentUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getCustomerDevelopmentUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setCustomerDevelopmentUserUuid(
		String customerDevelopmentUserUuid) {
	}

	@JSON
	@Override
	public long getTechLeaderUserId() {
		return _techLeaderUserId;
	}

	@Override
	public void setTechLeaderUserId(long techLeaderUserId) {
		_techLeaderUserId = techLeaderUserId;
	}

	@Override
	public String getTechLeaderUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getTechLeaderUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setTechLeaderUserUuid(String techLeaderUserUuid) {
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				project.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			project.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public project toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (project)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		projectImpl projectImpl = new projectImpl();

		projectImpl.setUuid(getUuid());
		projectImpl.setProjectId(getProjectId());
		projectImpl.setGroupId(getGroupId());
		projectImpl.setCompanyId(getCompanyId());
		projectImpl.setUserId(getUserId());
		projectImpl.setUserName(getUserName());
		projectImpl.setCreateDate(getCreateDate());
		projectImpl.setModifiedDate(getModifiedDate());
		projectImpl.setStatus(getStatus());
		projectImpl.setStatusByUserId(getStatusByUserId());
		projectImpl.setStatusByUserName(getStatusByUserName());
		projectImpl.setStatusDate(getStatusDate());
		projectImpl.setProjectRefId(getProjectRefId());
		projectImpl.setProjectName(getProjectName());
		projectImpl.setProjectType(getProjectType());
		projectImpl.setBrand(getBrand());
		projectImpl.setBrandPosition(getBrandPosition());
		projectImpl.setProjectCategory(getProjectCategory());
		projectImpl.setCharterGateApproval(getCharterGateApproval());
		projectImpl.setProductDesignLock(getProductDesignLock());
		projectImpl.setContractGateApproval(getContractGateApproval());
		projectImpl.setMarketReadyApproval(getMarketReadyApproval());
		projectImpl.setMarketDeployment(getMarketDeployment());
		projectImpl.setShipToTrade(getShipToTrade());
		projectImpl.setMarketingUserId(getMarketingUserId());
		projectImpl.setRndUserId(getRndUserId());
		projectImpl.setRndProductUserId(getRndProductUserId());
		projectImpl.setSupplyChainUserId(getSupplyChainUserId());
		projectImpl.setCustomerDevelopmentUserId(getCustomerDevelopmentUserId());
		projectImpl.setTechLeaderUserId(getTechLeaderUserId());

		projectImpl.resetOriginalValues();

		return projectImpl;
	}

	@Override
	public int compareTo(project project) {
		int value = 0;

		value = getProjectRefId().compareTo(project.getProjectRefId());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof project)) {
			return false;
		}

		project project = (project)obj;

		long primaryKey = project.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		projectModelImpl projectModelImpl = this;

		projectModelImpl._originalUuid = projectModelImpl._uuid;

		projectModelImpl._originalGroupId = projectModelImpl._groupId;

		projectModelImpl._setOriginalGroupId = false;

		projectModelImpl._originalCompanyId = projectModelImpl._companyId;

		projectModelImpl._setOriginalCompanyId = false;

		projectModelImpl._setModifiedDate = false;

		projectModelImpl._originalStatus = projectModelImpl._status;

		projectModelImpl._setOriginalStatus = false;

		projectModelImpl._originalProjectRefId = projectModelImpl._projectRefId;

		projectModelImpl._originalProjectName = projectModelImpl._projectName;

		projectModelImpl._originalProjectType = projectModelImpl._projectType;

		projectModelImpl._originalProjectCategory = projectModelImpl._projectCategory;

		projectModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<project> toCacheModel() {
		projectCacheModel projectCacheModel = new projectCacheModel();

		projectCacheModel.uuid = getUuid();

		String uuid = projectCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectCacheModel.uuid = null;
		}

		projectCacheModel.projectId = getProjectId();

		projectCacheModel.groupId = getGroupId();

		projectCacheModel.companyId = getCompanyId();

		projectCacheModel.userId = getUserId();

		projectCacheModel.userName = getUserName();

		String userName = projectCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			projectCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			projectCacheModel.createDate = createDate.getTime();
		}
		else {
			projectCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			projectCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			projectCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		projectCacheModel.status = getStatus();

		projectCacheModel.statusByUserId = getStatusByUserId();

		projectCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = projectCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			projectCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			projectCacheModel.statusDate = statusDate.getTime();
		}
		else {
			projectCacheModel.statusDate = Long.MIN_VALUE;
		}

		projectCacheModel.projectRefId = getProjectRefId();

		String projectRefId = projectCacheModel.projectRefId;

		if ((projectRefId != null) && (projectRefId.length() == 0)) {
			projectCacheModel.projectRefId = null;
		}

		projectCacheModel.projectName = getProjectName();

		String projectName = projectCacheModel.projectName;

		if ((projectName != null) && (projectName.length() == 0)) {
			projectCacheModel.projectName = null;
		}

		projectCacheModel.projectType = getProjectType();

		String projectType = projectCacheModel.projectType;

		if ((projectType != null) && (projectType.length() == 0)) {
			projectCacheModel.projectType = null;
		}

		projectCacheModel.brand = getBrand();

		String brand = projectCacheModel.brand;

		if ((brand != null) && (brand.length() == 0)) {
			projectCacheModel.brand = null;
		}

		projectCacheModel.brandPosition = getBrandPosition();

		String brandPosition = projectCacheModel.brandPosition;

		if ((brandPosition != null) && (brandPosition.length() == 0)) {
			projectCacheModel.brandPosition = null;
		}

		projectCacheModel.projectCategory = getProjectCategory();

		String projectCategory = projectCacheModel.projectCategory;

		if ((projectCategory != null) && (projectCategory.length() == 0)) {
			projectCacheModel.projectCategory = null;
		}

		Date charterGateApproval = getCharterGateApproval();

		if (charterGateApproval != null) {
			projectCacheModel.charterGateApproval = charterGateApproval.getTime();
		}
		else {
			projectCacheModel.charterGateApproval = Long.MIN_VALUE;
		}

		Date productDesignLock = getProductDesignLock();

		if (productDesignLock != null) {
			projectCacheModel.productDesignLock = productDesignLock.getTime();
		}
		else {
			projectCacheModel.productDesignLock = Long.MIN_VALUE;
		}

		Date contractGateApproval = getContractGateApproval();

		if (contractGateApproval != null) {
			projectCacheModel.contractGateApproval = contractGateApproval.getTime();
		}
		else {
			projectCacheModel.contractGateApproval = Long.MIN_VALUE;
		}

		Date marketReadyApproval = getMarketReadyApproval();

		if (marketReadyApproval != null) {
			projectCacheModel.marketReadyApproval = marketReadyApproval.getTime();
		}
		else {
			projectCacheModel.marketReadyApproval = Long.MIN_VALUE;
		}

		Date marketDeployment = getMarketDeployment();

		if (marketDeployment != null) {
			projectCacheModel.marketDeployment = marketDeployment.getTime();
		}
		else {
			projectCacheModel.marketDeployment = Long.MIN_VALUE;
		}

		Date shipToTrade = getShipToTrade();

		if (shipToTrade != null) {
			projectCacheModel.shipToTrade = shipToTrade.getTime();
		}
		else {
			projectCacheModel.shipToTrade = Long.MIN_VALUE;
		}

		projectCacheModel.marketingUserId = getMarketingUserId();

		projectCacheModel.rndUserId = getRndUserId();

		projectCacheModel.rndProductUserId = getRndProductUserId();

		projectCacheModel.supplyChainUserId = getSupplyChainUserId();

		projectCacheModel.customerDevelopmentUserId = getCustomerDevelopmentUserId();

		projectCacheModel.techLeaderUserId = getTechLeaderUserId();

		return projectCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(61);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", projectRefId=");
		sb.append(getProjectRefId());
		sb.append(", projectName=");
		sb.append(getProjectName());
		sb.append(", projectType=");
		sb.append(getProjectType());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", brandPosition=");
		sb.append(getBrandPosition());
		sb.append(", projectCategory=");
		sb.append(getProjectCategory());
		sb.append(", charterGateApproval=");
		sb.append(getCharterGateApproval());
		sb.append(", productDesignLock=");
		sb.append(getProductDesignLock());
		sb.append(", contractGateApproval=");
		sb.append(getContractGateApproval());
		sb.append(", marketReadyApproval=");
		sb.append(getMarketReadyApproval());
		sb.append(", marketDeployment=");
		sb.append(getMarketDeployment());
		sb.append(", shipToTrade=");
		sb.append(getShipToTrade());
		sb.append(", marketingUserId=");
		sb.append(getMarketingUserId());
		sb.append(", rndUserId=");
		sb.append(getRndUserId());
		sb.append(", rndProductUserId=");
		sb.append(getRndProductUserId());
		sb.append(", supplyChainUserId=");
		sb.append(getSupplyChainUserId());
		sb.append(", customerDevelopmentUserId=");
		sb.append(getCustomerDevelopmentUserId());
		sb.append(", techLeaderUserId=");
		sb.append(getTechLeaderUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(94);

		sb.append("<model><model-name>");
		sb.append("com.liferay.unilever.demo.cara.model.project");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectRefId</column-name><column-value><![CDATA[");
		sb.append(getProjectRefId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectName</column-name><column-value><![CDATA[");
		sb.append(getProjectName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectType</column-name><column-value><![CDATA[");
		sb.append(getProjectType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandPosition</column-name><column-value><![CDATA[");
		sb.append(getBrandPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectCategory</column-name><column-value><![CDATA[");
		sb.append(getProjectCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>charterGateApproval</column-name><column-value><![CDATA[");
		sb.append(getCharterGateApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productDesignLock</column-name><column-value><![CDATA[");
		sb.append(getProductDesignLock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contractGateApproval</column-name><column-value><![CDATA[");
		sb.append(getContractGateApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketReadyApproval</column-name><column-value><![CDATA[");
		sb.append(getMarketReadyApproval());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketDeployment</column-name><column-value><![CDATA[");
		sb.append(getMarketDeployment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipToTrade</column-name><column-value><![CDATA[");
		sb.append(getShipToTrade());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>marketingUserId</column-name><column-value><![CDATA[");
		sb.append(getMarketingUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rndUserId</column-name><column-value><![CDATA[");
		sb.append(getRndUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rndProductUserId</column-name><column-value><![CDATA[");
		sb.append(getRndProductUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>supplyChainUserId</column-name><column-value><![CDATA[");
		sb.append(getSupplyChainUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customerDevelopmentUserId</column-name><column-value><![CDATA[");
		sb.append(getCustomerDevelopmentUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>techLeaderUserId</column-name><column-value><![CDATA[");
		sb.append(getTechLeaderUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = project.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			project.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _projectId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _projectRefId;
	private String _originalProjectRefId;
	private String _projectName;
	private String _originalProjectName;
	private String _projectType;
	private String _originalProjectType;
	private String _brand;
	private String _brandPosition;
	private String _projectCategory;
	private String _originalProjectCategory;
	private Date _charterGateApproval;
	private Date _productDesignLock;
	private Date _contractGateApproval;
	private Date _marketReadyApproval;
	private Date _marketDeployment;
	private Date _shipToTrade;
	private long _marketingUserId;
	private long _rndUserId;
	private long _rndProductUserId;
	private long _supplyChainUserId;
	private long _customerDevelopmentUserId;
	private long _techLeaderUserId;
	private long _columnBitmask;
	private project _escapedModel;
}